def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def debugStoreFile = keystoreProperties.getProperty('debug.file')
def debugStorePassword = keystoreProperties.getProperty('debug.storePassword')
def debugKeyAlias = keystoreProperties.getProperty('debug.alias')
def debugKeyPassword = keystoreProperties.getProperty('debug.keyPassword')

def prodStoreFile = keystoreProperties.getProperty('prod.file')
def prodStorePassword = keystoreProperties.getProperty('prod.storePassword')
def prodKeyAlias = keystoreProperties.getProperty('prod.alias')
def prodKeyPassword = keystoreProperties.getProperty('prod.keyPassword')

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.dexterhealth.dextercare"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion 26
        targetSdkVersion 33
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile rootProject.file(debugStoreFile)
            storePassword debugStorePassword
            keyAlias debugKeyAlias
            keyPassword debugKeyPassword
        }
        prod {
            storeFile rootProject.file(prodStoreFile)
            storePassword prodStorePassword
            keyAlias prodKeyAlias
            keyPassword prodKeyPassword
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            firebaseCrashlytics {
                // If you don't need crash reporting for your debug build,
                // you can speed up your build by disabling mapping file uploading.
                mappingFileUploadEnabled false
            }
        }
        release {
            minifyEnabled true
            useProguard true
            // shrinkResources true
            signingConfig signingConfigs.prod
            firebaseCrashlytics { mappingFileUploadEnabled true }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
